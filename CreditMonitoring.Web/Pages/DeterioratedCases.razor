@page "/deteriorated-cases"
@attribute [Authorize]
@inject IWebCreditMonitoringService CreditService
@inject NavigationManager Navigation

<h3>信用惡化案件列表</h3>

<div class="alert alert-info">
    <h4>案件監控</h4>
    <p>以下是需要關注的信用惡化案件，請及時處理。</p>
</div>

@if (loading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">載入中...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">
        <h4>錯誤</h4>
        <p>@error</p>
    </div>
}
else
{
    <div class="row mb-3">
        <div class="col">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="搜尋案件..." @bind="searchText" @bind:event="oninput" />
                <button class="btn btn-outline-secondary" @onclick="HandleSearch">
                    <i class="fas fa-search"></i>
                </button>
            </div>
        </div>
        <div class="col-auto">
            <div class="btn-group">
                <button class="btn btn-outline-primary @(filterSeverity == null ? "active" : "")"
                        @onclick="() => FilterBySeverity(null)">
                    全部
                </button>
                @foreach (var severity in Enum.GetValues<AlertSeverity>())
                {
                    <button class="btn btn-outline-primary @(filterSeverity == severity ? "active" : "")"
                            @onclick="() => FilterBySeverity(severity)">
                        @severity
                    </button>
                }
            </div>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>案件編號</th>
                    <th>客戶姓名</th>
                    <th>身分證字號</th>
                    <th>貸款金額</th>
                    <th>當前餘額</th>
                    <th>逾期天數</th>
                    <th>風險等級</th>
                    <th>最後更新</th>
                    <th>操作</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var caseItem in filteredCases)
                {
                    <tr class="@GetRowClass(caseItem.AlertSeverity)">
                        <td>@caseItem.AccountNumber</td>
                        <td>@caseItem.CustomerName</td>
                        <td>@caseItem.IdNumber</td>
                        <td>@caseItem.LoanAmount.ToString("C")</td>
                        <td>@caseItem.CurrentBalance.ToString("C")</td>
                        <td>
                            <span class="badge @GetOverdueBadgeClass(caseItem.OverdueDays)">
                                @caseItem.OverdueDays 天
                            </span>
                        </td>
                        <td>
                            <span class="badge @GetRiskBadgeClass(caseItem.AlertSeverity)">
                                @caseItem.RiskLevel
                            </span>
                        </td>
                        <td>@caseItem.LastUpdateDate.ToString("yyyy/MM/dd")</td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-primary" @onclick="() => ViewDetails(caseItem.LoanAccountId)">
                                    詳情
                                </button>
                                <button class="btn btn-sm btn-warning" @onclick="() => ViewAccount(caseItem.LoanAccountId)">
                                    帳戶
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (!filteredCases.Any())
    {
        <div class="alert alert-info text-center">
            <h5>沒有找到符合條件的案件</h5>
            <p>請調整搜尋條件或篩選器。</p>
        </div>
    }
}

@code {
    private List<DeterioratedCaseViewModel> cases = new();
    private List<DeterioratedCaseViewModel> filteredCases = new();
    private bool loading = true;
    private string error = string.Empty;
    private string searchText = string.Empty;
    private AlertSeverity? filterSeverity = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cases = await CreditService.GetDeterioratedCasesViewModelAsync();
            filteredCases = cases;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private void HandleSearch()
    {
        ApplyFilters();
    }

    private void FilterBySeverity(AlertSeverity? severity)
    {
        filterSeverity = severity;
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredCases = cases.Where(c =>
            (string.IsNullOrEmpty(searchText) ||
             c.CustomerName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             c.AccountNumber.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             c.IdNumber.Contains(searchText, StringComparison.OrdinalIgnoreCase)) &&
            (filterSeverity == null || c.AlertSeverity == filterSeverity)
        ).ToList();
    }

    private void ViewDetails(int accountId)
    {
        Navigation.NavigateTo($"/case-details/{accountId}");
    }

    private void ViewAccount(int accountId)
    {
        Navigation.NavigateTo($"/account-details/{accountId}");
    }

    private string GetRowClass(AlertSeverity severity)
    {
        return severity switch
        {
            AlertSeverity.High => "table-danger",
            AlertSeverity.Medium => "table-warning",
            AlertSeverity.Low => "table-info",
            _ => ""
        };
    }

    private string GetRiskBadgeClass(AlertSeverity severity)
    {
        return severity switch
        {
            AlertSeverity.High => "bg-danger",
            AlertSeverity.Medium => "bg-warning text-dark",
            AlertSeverity.Low => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetOverdueBadgeClass(int days)
    {
        return days switch
        {
            > 90 => "bg-danger",
            > 30 => "bg-warning text-dark",
            > 0 => "bg-info",
            _ => "bg-success"
        };
    }
}